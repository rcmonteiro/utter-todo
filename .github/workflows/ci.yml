name: CI
 
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ubuntu-latest

    # services:
    #   postgres:
    #     image: bitnami/postgresql
    #     ports:
    #       - 5432:5432
    #     env:
    #       POSTGRESQL_USERNAME: docker
    #       POSTGRESQL_PASSWORD: docker
    #       POSTGRESQL_DATABASE: utter-todo
      
    #   api:
    #     image: rcmonteiro/utter_todo_api:latest
    #     ports:
    #       - 4001:4001
    #     env:
    #       JWT_SECRET: secret
    #       API_PORT: 4001
    #       DB_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public
    #       DB_TEST_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.1.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
 
      - name: Install dependencies
        run: pnpm install
 
      - name: Turbo Repo Build
        run: pnpm build

      # - name: Run Domain Unit Tests (Vitest)
      #   run: | 
      #     cd apps/api
      #     pnpm run test
      #   env:
      #     JWT_SECRET: secret
      #     API_PORT: 4000
      #     DB_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public
      #     DB_TEST_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public

      # - name: Run API e2e tests (Vitest)
      #   run: |
      #     cd apps/api
      #     pnpm drizzle-kit push
      #     pnpm run test:e2e
      #   env:          
      #     JWT_SECRET: secret
      #     API_PORT: 4000
      #     DB_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public
      #     DB_TEST_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public

      # - name: Run WEB Unit Tests (Vitest)
      #   run: |
      #     cd apps/web
      #     pnpm run test
      #   env:
      #     NODE_ENV: test
      #     API_URL: http://localhost:4000
      #     NEXT_PUBLIC_APP_URL: http://localhost:50789

      # - name: Install Playwright Browsers
      #   run: |
      #     cd apps/web
      #     pnpm add -g playwright
      #     pnpm exec playwright install --with-deps

      # - name: Run WEB e2e tests (Playwright)
      #   run: |
      #     cd apps/web
      #     npx playwright test
      #   env:
      #     NODE_ENV: test
      #     API_URL: http://localhost:50789/api
      #     NEXT_PUBLIC_APP_URL: http://localhost:50789

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create tag
        id: create_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # - name: Login on Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Create API as a Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ./Dockerfile.api
      #     push: true
      #     tags: rcmonteiro/utter_todo_api:${{ steps.create_tag.outputs.sha }},rcmonteiro/utter_todo_api:latest
      # - name: Build and Push to Docker Hub
      #   run: | 
      #     docker build -f Dockerfile.api -t rcmonteiro/utter_todo_api:${{ steps.create_tag.outputs.sha }} .
      #     docker push rcmonteiro/utter_todo_api:${{ steps.create_tag.outputs.sha }}

      # - name: Create WEB as a Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ./Dockerfile.web
      #     push: true
      #     tags: rcmonteiro/utter_todo_web:${{ steps.create_tag.outputs.sha }},rcmonteiro/utter_todo_web:latest
      # - name: Build and Push to Docker Hub
      #   run: | 
      #     docker build -f Dockerfile.web -t rcmonteiro/utter_todo_web:${{ steps.create_tag.outputs.sha }} .
      #     docker push rcmonteiro/utter_todo_web:${{ steps.create_tag.outputs.sha }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE }}
          aws-region: us-east-2
  
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Build and Push Docker API Image
        id: build-docker-api-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.create_tag.outputs.sha }}
        run: | 
          docker build -f Dockerfile.api -t $ECR_REGISTRY/utter_todo_api:$TAG .
          docker tag $ECR_REGISTRY/utter_todo_api:$TAG $ECR_REGISTRY/utter_todo_api:latest
          docker push --all-tags $ECR_REGISTRY/utter_todo_api
          IMAGE=$(echo $ECR_REGISTRY/utter_todo_api:$TAG)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Build and Push Docker WEB Image
        id: build-docker-web-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.create_tag.outputs.sha }}
        run: | 
          docker build -f Dockerfile.web -t $ECR_REGISTRY/utter_todo_web:$TAG .
          docker tag $ECR_REGISTRY/utter_todo_web:$TAG $ECR_REGISTRY/utter_todo_web:latest
          docker push --all-tags $ECR_REGISTRY/utter_todo_web
          IMAGE=$(echo $ECR_REGISTRY/utter_todo_web:$TAG)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Deploy API to AWS App Runner
        id: deploy-api-app-runner
        uses: awslabs/amazon-app-runner-deploy@main
        with: 
          service: utter_todo_api
          image: ${{ steps.build-docker-api-image.outputs.image }}
          access-role-arn: ${{ secrets.APP_RUNNER_ROLE }}
          region: us-east-2
          cpu: 1
          memory: 2
          port: 3000
          wait-for-service-stability-seconds: 180

      - name: App Runner API Check Status
        run: | 
            echo "App Runner API Status: ${{ steps.deploy-api-app-runner.outputs.service-url }}"

      - name: Deploy WEB to AWS App Runner
        id: deploy-web-app-runner
        uses: awslabs/amazon-app-runner-deploy@main
        with: 
          service: utter_todo_web
          image: ${{ steps.build-docker-web-image.outputs.image }}
          access-role-arn: ${{ secrets.APP_RUNNER_ROLE }}
          region: us-east-2
          cpu: 1
          memory: 2
          port: 3000
          wait-for-service-stability-seconds: 180
  
      - name: App Runner WEB Check Status
        run: | 
            echo "App Runner WEB Status: ${{ steps.deploy-web-app-runner.outputs.service-url }}"