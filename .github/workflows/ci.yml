name: CI
 
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
 
jobs:
  build:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ubuntu-latest

    services:
      postgres:
        image: bitnami/postgresql
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: docker
          POSTGRESQL_PASSWORD: docker
          POSTGRESQL_DATABASE: utter-todo

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
 
      - uses: pnpm/action-setup@v3
        with:
          version: 8
 
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
 
      - name: Install dependenci
        run: pnpm install
 
      - name: Build
        run: pnpm build

      - name: Run all unit tests
        run: pnpm run test
        env:
          API_URL: http://localhost
          JWT_SECRET: secret
          API_PORT: 4000
          DB_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public
          DB_TEST_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public 

      - name: Run all e2e tests
        run: |
          cd apps/api
          pnpm drizzle-kit push
          pnpm run test:e2e
        env:
          API_URL: http://localhost
          JWT_SECRET: secret
          API_PORT: 4000
          DB_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public
          DB_TEST_URL: postgresql://docker:docker@localhost:5432/utter-todo?schema=public 

      # - name: Install Playwright Browsers
      #   run: |
      #     cd apps/web
      #     pnpm add -g playwright
      #     pnpm exec playwright install --with-deps

      # - name: Run Playwright tests
      #   run: |
      #     cd apps/api
      #     pnpm drizzle-kit push
      #     pnpm run dev
      #     cd ../web
      #     npx playwright test
      #   env:
      #     NODE_ENV: test
      #     NEXT_PUBLIC_API_URL: http://localhost:4000/api
      #     NEXT_PUBLIC_APP_URL: http://localhost:50789

      - name: Create tag
        id: create_tag
        run: |
          SHA=$(echo $GITHUB_SHA | head -c7)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Login on Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create API as a Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: rcmonteiro/utter-todo-api:${{ steps.create_tag.outputs.sha }},rcmonteiro/utter-todo-api:latest
      - name: Build and Push to Docker Hub
        run: | 
          docker build -f Dockerfile.api -t rcmonteiro/utter-todo-api:${{ steps.create_tag.outputs.sha }} ./apps/api/
          docker push rcmonteiro/utter-todo-api:${{ steps.create_tag.outputs.sha }}
      